using System;
using System.Activities;
using System.Threading;
using System.Threading.Tasks;
using DocumentSign.Activities.Properties;
using UiPath.Shared.Activities;
using UiPath.Shared.Activities.Localization;
using UiPath.Shared.Activities.Utilities;
using DocuSign.eSign.Model;
using DocuSign.eSign.Api;
using DocumentSign.Models;
using System.Collections.Generic;
using System.Linq;

namespace DocumentSign.Activities
{
    [LocalizedDisplayName(nameof(Resources.SendEnvelope_DisplayName))]
    [LocalizedDescription(nameof(Resources.SendEnvelope_Description))]
    public class SendEnvelope : ContinuableAsyncCodeActivity
    {
        #region Properties

        /// <summary>
        /// If set, continue executing the remaining activities even if the current activity has failed.
        /// </summary>
        [LocalizedCategory(nameof(Resources.Common_Category))]
        [LocalizedDisplayName(nameof(Resources.ContinueOnError_DisplayName))]
        [LocalizedDescription(nameof(Resources.ContinueOnError_Description))]
        public override InArgument<bool> ContinueOnError { get; set; }

        /// <summary>
        /// Pre definedEnvelope Object
        /// </summary>
        [LocalizedDisplayName(nameof(Resources.SendEnvelope_Envelope_DisplayName))]
        [LocalizedDescription(nameof(Resources.SendEnvelope_Envelope_Description))]
        [LocalizedCategory(nameof(Resources.Input_Category))]
        public InArgument<object> Envelope { get; set; }

        /// <summary>
        /// Email Subject Text
        /// </summary>
        [LocalizedDisplayName(nameof(Resources.SendEnvelope_EmailSubject_DisplayName))]
        [LocalizedDescription(nameof(Resources.SendEnvelope_EmailSubject_Description))]
        [LocalizedCategory(nameof(Resources.Input_Category))]
        public InArgument<string> EmailSubject { get; set; }

        /// <summary>
        /// List of Documents which are generated through Create Document Activity
        /// </summary>
        [LocalizedDisplayName(nameof(Resources.DefineEnvelope_Documents_DisplayName))]
        [LocalizedDescription(nameof(Resources.DefineEnvelope_Documents_Description))]
        [LocalizedCategory(nameof(Resources.Input_Category))]
        public InArgument<IEnumerable<object>> Documents { get; set; }

        /// <summary>
        /// List of Recipients which are generated through Create Recipient Activity e.g. Signers, CarbonCopies etc.
        /// </summary>
        [LocalizedDisplayName(nameof(Resources.DefineEnvelope_Recipients_DisplayName))]
        [LocalizedDescription(nameof(Resources.DefineEnvelope_Recipients_Description))]
        [LocalizedCategory(nameof(Resources.Input_Category))]
        public InArgument<IEnumerable<object>> Recipients { get; set; }

        /// <summary>
        /// The Status the Envelope should get
        /// </summary>
        [LocalizedDisplayName(nameof(Resources.SendEnvelope_Status_DisplayName))]
        [LocalizedDescription(nameof(Resources.SendEnvelope_Status_Description))]
        [LocalizedCategory(nameof(Resources.Options_Category))]
        public Enums.EnvelopeStates Status { get; set; }

        /// <summary>
        /// Envelope ID generated by DocuSign
        /// </summary>
        [LocalizedDisplayName(nameof(Resources.SendEnvelope_EnvelopeID_DisplayName))]
        [LocalizedDescription(nameof(Resources.SendEnvelope_EnvelopeID_Description))]
        [LocalizedCategory(nameof(Resources.Output_Category))]
        public OutArgument<string> EnvelopeID { get; set; }

        /// <summary>
        /// The actual Envelope Status
        /// </summary>
        [LocalizedDisplayName(nameof(Resources.SendEnvelope_EnvelopeStatus_DisplayName))]
        [LocalizedDescription(nameof(Resources.SendEnvelope_EnvelopeStatus_Description))]
        [LocalizedCategory(nameof(Resources.Output_Category))]
        public OutArgument<string> EnvelopeStatus { get; set; }

        #endregion


        #region Constructors

        public SendEnvelope()
        {
            Constraints.Add(ActivityConstraints.HasParentType<SendEnvelope, SignScope>(string.Format(Resources.ValidationScope_Error, Resources.SignScope_DisplayName)));
        }

        #endregion


        #region Protected Methods

        protected override void CacheMetadata(CodeActivityMetadata metadata)
        {
            if (Envelope == null) metadata.AddValidationError(string.Format(Resources.ValidationValue_Error, nameof(Envelope)));
            if (EmailSubject == null) metadata.AddValidationError(string.Format(Resources.ValidationValue_Error, nameof(EmailSubject)));

            base.CacheMetadata(metadata);
        }

        protected override async Task<Action<AsyncCodeActivityContext>> ExecuteAsync(AsyncCodeActivityContext context, CancellationToken cancellationToken)
        {
            // Object Container: Use objectContainer.Get<T>() to retrieve objects from the scope
            var objectContainer = context.GetFromContext<IObjectContainer>(SignScope.ParentContainerPropertyTag);

            //Retrieve Authentication Object from Scope by Type
            Authentication authentication = objectContainer.Get<Authentication>();

            // Inputs       
            var emailSubject = EmailSubject.Get(context);
            var documents = Documents.Get(context);
            var recipients = Recipients.Get(context);

            //authenticate
            authentication.CheckToken();

            //instanciate Api
            EnvelopesApi envelopeApi = new EnvelopesApi(authentication.ApiClient.Configuration);

            //Define Envelope
            EnvelopeDefinition envelope = MakeEnvelope(documents, recipients);
            envelope.EmailSubject = emailSubject;
            envelope.Status = Enum.GetName(typeof(Enums.EnvelopeStates), Status);

            //Send the Envelope to DocuSign Platform
            EnvelopeSummary results = await envelopeApi.CreateEnvelopeAsync(authentication.AccountID, envelope);

            // Outputs
            return (ctx) =>
            {
                EnvelopeID.Set(ctx, results.EnvelopeId);
                EnvelopeStatus.Set(ctx, results.Status);
            };
        }


        private EnvelopeDefinition MakeEnvelope(IEnumerable<object> documents, IEnumerable<object> recipients)
        {
            EnvelopeDefinition Envelope = new EnvelopeDefinition();
            Recipients Recipients = new Recipients();

            //Loop through all Documents
            foreach (var singleDocument in documents)
            {
                //Only Documents of Type TransportDocument are valid here
                if (singleDocument != null && singleDocument.GetType() == typeof(Document))
                {
                    //Add the Documents to Envelope
                    if ((Envelope.Documents != null) && (Envelope.Documents.Any()) && !Envelope.Documents.Contains((Document)singleDocument))
                        Envelope.Documents.Add(((Document)singleDocument));
                    else
                        Envelope.Documents = new List<Document>() { ((Document)singleDocument) };
                }
                else
                    throw new Exception("Given Document is null or of invalid Type");

                //Loop through all Recipients which are provided and add them to the Envelope
                foreach (var assignee in recipients)
                {
                    //Map Recipient Type 
                    switch (assignee.GetType().Name)
                    {
                        case "Agent":
                            if (Recipients.Agents != null && !Recipients.Agents.Contains((Agent)assignee))
                                Recipients.Agents.Add((Agent)assignee);
                            else
                                Recipients.Agents = new List<Agent>() { (Agent)assignee };
                            break;
                        case "Editor":
                            if (Recipients.Editors != null && !Recipients.Editors.Contains((Editor)assignee))
                                Recipients.Editors.Add((Editor)assignee);
                            else
                                Recipients.Editors = new List<Editor>() { (Editor)assignee };
                            break;
                        case "Signer":
                            //Signers will also get the Signature Tab from our TransportDocument Object which belongs to the added Document
                            Signer signer = (Signer)assignee;

                            //Add finally to envelope
                            if (Recipients.Signers != null && !Recipients.Signers.Contains((Signer)assignee))
                                Recipients.Signers.Add(signer);
                            else
                                Recipients.Signers = new List<Signer>() { signer };
                            break;
                        case "CarbonCopy":
                            if (Recipients.CarbonCopies != null && !Recipients.CarbonCopies.Contains((CarbonCopy)assignee))
                                Recipients.CarbonCopies.Add((CarbonCopy)assignee);
                            else
                                Recipients.CarbonCopies = new List<CarbonCopy>() { (CarbonCopy)assignee };
                            break;
                        default:
                            Console.WriteLine("Recipient: " + assignee.GetType().Name + " not supported yet.");
                            break;
                    }
                }
            }

            //Finally add Recipients to our Envelope Object
            Envelope.Recipients = Recipients;
            return Envelope;
        }

        #endregion
    }
}

